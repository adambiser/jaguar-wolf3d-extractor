CRY_COLOR_TABLE = [
    (0x00, 0x00, 0xFF), (0x00, 0x11, 0xFF), (0x00, 0x22, 0xFF), (0x00, 0x33, 0xFF),
    (0x00, 0x44, 0xFF), (0x00, 0x55, 0xFF), (0x00, 0x66, 0xFF), (0x00, 0x77, 0xFF),
    (0x00, 0x88, 0xFF), (0x00, 0x99, 0xFF), (0x00, 0xAA, 0xFF), (0x00, 0xBB, 0xFF),
    (0x00, 0xCC, 0xFF), (0x00, 0xDD, 0xFF), (0x00, 0xEE, 0xFF), (0x00, 0xFF, 0xFF),
    (0x22, 0x00, 0xFF), (0x22, 0x13, 0xFF), (0x22, 0x26, 0xFF), (0x22, 0x39, 0xFF),
    (0x22, 0x4D, 0xFF), (0x22, 0x60, 0xFF), (0x22, 0x73, 0xFF), (0x22, 0x86, 0xFF),
    (0x22, 0x9A, 0xFF), (0x22, 0xAD, 0xFF), (0x22, 0xC0, 0xFF), (0x22, 0xD3, 0xFF),
    (0x22, 0xE7, 0xFF), (0x22, 0xFA, 0xFF), (0x13, 0xFF, 0xF0), (0x00, 0xFF, 0xDD),
    (0x44, 0x00, 0xFF), (0x44, 0x15, 0xFF), (0x44, 0x2B, 0xFF), (0x44, 0x40, 0xFF),
    (0x44, 0x56, 0xFF), (0x44, 0x6B, 0xFF), (0x44, 0x81, 0xFF), (0x44, 0x96, 0xFF),
    (0x44, 0xAC, 0xFF), (0x44, 0xC1, 0xFF), (0x44, 0xD7, 0xFF), (0x44, 0xEC, 0xFF),
    (0x40, 0xFF, 0xFC), (0x2B, 0xFF, 0xE6), (0x15, 0xFF, 0xD0), (0x00, 0xFF, 0xBB),
    (0x66, 0x00, 0xFF), (0x66, 0x17, 0xFF), (0x66, 0x2F, 0xFF), (0x66, 0x47, 0xFF),
    (0x66, 0x5F, 0xFF), (0x66, 0x77, 0xFF), (0x66, 0x8E, 0xFF), (0x66, 0xA6, 0xFF),
    (0x66, 0xBE, 0xFF), (0x66, 0xD6, 0xFF), (0x66, 0xEE, 0xFF), (0x5F, 0xFF, 0xF8),
    (0x47, 0xFF, 0xE0), (0x2F, 0xFF, 0xC8), (0x17, 0xFF, 0xB1), (0x00, 0xFF, 0x99),
    (0x87, 0x00, 0xFF), (0x87, 0x1A, 0xFF), (0x87, 0x34, 0xFF), (0x87, 0x4E, 0xFF),
    (0x87, 0x68, 0xFF), (0x87, 0x82, 0xFF), (0x87, 0x9C, 0xFF), (0x87, 0xB6, 0xFF),
    (0x87, 0xD0, 0xFF), (0x87, 0xEA, 0xFF), (0x87, 0xFF, 0xF9), (0x68, 0xFF, 0xDF),
    (0x4E, 0xFF, 0xC5), (0x34, 0xFF, 0xAB), (0x1A, 0xFF, 0x91), (0x00, 0xFF, 0x77),
    (0xA9, 0x00, 0xFF), (0xA9, 0x1C, 0xFF), (0xA9, 0x38, 0xFF), (0xA9, 0x55, 0xFF),
    (0xA9, 0x71, 0xFF), (0xA9, 0x8D, 0xFF), (0xA9, 0xAA, 0xFF), (0xA9, 0xC6, 0xFF),
    (0xA9, 0xE2, 0xFF), (0xAA, 0xFF, 0xFF), (0x8D, 0xFF, 0xE3), (0x71, 0xFF, 0xC6),
    (0x55, 0xFF, 0xAA), (0x38, 0xFF, 0x8D), (0x1C, 0xFF, 0x71), (0x00, 0xFF, 0x55),
    (0xCB, 0x00, 0xFF), (0xCB, 0x1E, 0xFF), (0xCB, 0x3D, 0xFF), (0xCB, 0x5B, 0xFF),
    (0xCB, 0x85, 0xFF), (0xCB, 0x99, 0xFF), (0xCB, 0xB7, 0xFF), (0xCB, 0xD6, 0xFF),
    (0xCB, 0xF4, 0xFF), (0xCB, 0xFF, 0xEB), (0x99, 0xFF, 0xCC), (0x7A, 0xFF, 0xAD),
    (0x5B, 0xFF, 0x8F), (0x3D, 0xFF, 0x70), (0x1E, 0xFF, 0x51), (0x00, 0xFF, 0x33),
    (0xED, 0x00, 0xFF), (0xED, 0x20, 0xFF), (0xED, 0x41, 0xFF), (0xED, 0x62, 0xFF),
    (0xED, 0x83, 0xFF), (0xED, 0xA4, 0xFF), (0xED, 0xC5, 0xFF), (0xED, 0xE6, 0xFF),
    (0xE6, 0xFF, 0xF7), (0xC5, 0xFF, 0xD6), (0xA4, 0xFF, 0xB5), (0x83, 0xFF, 0x94),
    (0x62, 0xFF, 0x73), (0x41, 0xFF, 0x52), (0x20, 0xFF, 0x31), (0x00, 0xFF, 0x11),
    (0xFF, 0x00, 0xED), (0xFF, 0x20, 0xED), (0xFF, 0x41, 0xED), (0xFF, 0x62, 0xED),
    (0xFF, 0x83, 0xED), (0xFF, 0xA4, 0xED), (0xFF, 0xC5, 0xED), (0xFF, 0xE6, 0xED),
    (0xF7, 0xFF, 0xE6), (0xD6, 0xFF, 0xC5), (0xB5, 0xFF, 0xA4), (0x94, 0xFF, 0x83),
    (0x73, 0xFF, 0x62), (0x52, 0xFF, 0x41), (0x31, 0xFF, 0x20), (0x11, 0xFF, 0x00),
    (0xFF, 0x00, 0xCB), (0xFF, 0x1E, 0xCB), (0xFF, 0x3D, 0xCB), (0xFF, 0x5B, 0xCB),
    (0xFF, 0x85, 0xCB), (0xFF, 0x99, 0xCB), (0xFF, 0xB7, 0xCB), (0xFF, 0xD6, 0xCB),
    (0xFF, 0xF4, 0xCB), (0xEB, 0xFF, 0xCB), (0xCC, 0xFF, 0x99), (0xAD, 0xFF, 0x7A),
    (0x8F, 0xFF, 0x5B), (0x70, 0xFF, 0x3D), (0x51, 0xFF, 0x1E), (0x33, 0xFF, 0x00),
    (0xFF, 0x00, 0xA9), (0xFF, 0x1C, 0xA9), (0xFF, 0x38, 0xA9), (0xFF, 0x55, 0xA9),
    (0xFF, 0x71, 0xA9), (0xFF, 0x8D, 0xA9), (0xFF, 0xAA, 0xA9), (0xFF, 0xC6, 0xA9),
    (0xFF, 0xE2, 0xA9), (0xFF, 0xFF, 0xAA), (0xE3, 0xFF, 0x8D), (0xC6, 0xFF, 0x71),
    (0xAA, 0xFF, 0x55), (0x8D, 0xFF, 0x38), (0x71, 0xFF, 0x1C), (0x55, 0xFF, 0x00),
    (0xFF, 0x00, 0x87), (0xFF, 0x1A, 0x87), (0xFF, 0x34, 0x87), (0xFF, 0x4E, 0x87),
    (0xFF, 0x68, 0x87), (0xFF, 0x82, 0x87), (0xFF, 0x9C, 0x87), (0xFF, 0xB6, 0x87),
    (0xFF, 0xD0, 0x87), (0xFF, 0xEA, 0x87), (0xF9, 0xFF, 0x87), (0xDF, 0xFF, 0x68),
    (0xC5, 0xFF, 0x4E), (0xAB, 0xFF, 0x34), (0x91, 0xFF, 0x1A), (0x77, 0xFF, 0x00),
    (0xFF, 0x00, 0x66), (0xFF, 0x17, 0x66), (0xFF, 0x2F, 0x66), (0xFF, 0x47, 0x66),
    (0xFF, 0x5F, 0x66), (0xFF, 0x77, 0x66), (0xFF, 0x8E, 0x66), (0xFF, 0xA6, 0x66),
    (0xFF, 0xBE, 0x66), (0xFF, 0xD6, 0x66), (0xFF, 0xEE, 0x66), (0xF8, 0xFF, 0x5F),
    (0xE0, 0xFF, 0x47), (0xC8, 0xFF, 0x2F), (0xB1, 0xFF, 0x17), (0x99, 0xFF, 0x00),
    (0xFF, 0x00, 0x44), (0xFF, 0x15, 0x44), (0xFF, 0x2B, 0x44), (0xFF, 0x40, 0x44),
    (0xFF, 0x56, 0x44), (0xFF, 0x6B, 0x44), (0xFF, 0x81, 0x44), (0xFF, 0x96, 0x44),
    (0xFF, 0xAC, 0x44), (0xFF, 0xC1, 0x44), (0xFF, 0xD7, 0x44), (0xFF, 0xEC, 0x44),
    (0xFC, 0xFF, 0x40), (0xE6, 0xFF, 0x2B), (0xD0, 0xFF, 0x15), (0xBB, 0xFF, 0x00),
    (0xFF, 0x00, 0x22), (0xFF, 0x13, 0x22), (0xFF, 0x26, 0x22), (0xFF, 0x39, 0x22),
    (0xFF, 0x4D, 0x22), (0xFF, 0x60, 0x22), (0xFF, 0x73, 0x22), (0xFF, 0x86, 0x22),
    (0xFF, 0x9A, 0x22), (0xFF, 0xAD, 0x22), (0xFF, 0xC0, 0x22), (0xFF, 0xD3, 0x22),
    (0xFF, 0xE7, 0x13), (0xFF, 0xFA, 0x00), (0xF0, 0xFF, 0x00), (0xDD, 0xFF, 0x00),
    (0xFF, 0x00, 0x00), (0xFF, 0x11, 0x00), (0xFF, 0x22, 0x00), (0xFF, 0x33, 0x00),
    (0xFF, 0x44, 0x00), (0xFF, 0x55, 0x00), (0xFF, 0x66, 0x00), (0xFF, 0x77, 0x00),
    (0xFF, 0x88, 0x00), (0xFF, 0x99, 0x00), (0xFF, 0xAA, 0x00), (0xFF, 0xBB, 0x00),
    (0xFF, 0xCC, 0x00), (0xFF, 0xDD, 0x00), (0xFF, 0xEE, 0x00), (0xFF, 0xFF, 0x00),
]


def cry_to_rgba(pixel_data: bytes):
    color, intensity = pixel_data
    red, green, blue = CRY_COLOR_TABLE[color]
    red = (red * intensity) // 255
    green = (green * intensity) // 255
    blue = (blue * intensity) // 255
    return red, green, blue, 0xff


def convert_cry_palette_to_rgba(palette_data):
    assert len(palette_data) % 512 == 0  # 256 colors, 2 bytes each
    return [cry_to_rgba(palette_data[index: index + 2]) for index in range(0, len(palette_data), 2)]
